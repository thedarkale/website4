{"version":3,"sources":["webpack:///./src/components/Pagination/PaginationItem.jsx","webpack:///./src/components/Pagination/Pagination.jsx","webpack:///./src/templates/tag-template.jsx"],"names":["PaginationItem","props","value","index","currentPage","pathPrefix","pathPrefixPagination","isLeft","isRight","to","AutoLink","className","activeClassName","icon","size","Pagination","totalPages","extraClass","respArr","i","push","MAX_PAGINATION_ITEMS","map","key","TagTemplate","data","pageContext","tag","tagList","categoryList","latestPostEdges","postEdges","allMarkdownRemark","edges","postList","getPostList","content","hasThumbnail","config","tagHasThumbnail","hasLoadmore","getTagPath","sidebar","links","sidebarLinks","title","tagHeader","siteTitle"],"mappings":"+IAsCeA,EAlCQ,SAAAC,GACrB,IAAQC,EAAgED,EAAhEC,MAAOC,EAAyDF,EAAzDE,MAAOC,EAAkDH,EAAlDG,YAAaC,EAAqCJ,EAArCI,WAAYC,EAAyBL,EAAzBK,qBACzCC,EAAmB,IAAVL,GAAeC,EAAQC,EAAc,EAC9CI,EAAoB,IAAVN,GAAeC,EAAQC,EAAc,EAEjDK,EAAKJ,EAUT,OARIE,EACFE,GAASH,EAAP,KAA+BF,EAAc,GACtCI,EACTC,GAASH,EAAP,KAA+BF,EAAc,GAC5B,IAAVF,IACTO,GAASH,EAAP,IAA+BJ,GAIjC,kBAACQ,EAAA,EAAD,CACED,GAAIA,EACJE,UAAS,oBAAqBP,IAAgBF,EAAQ,SAAW,IACjEU,gBAAgB,UAEfL,GACC,kBAAC,IAAD,CAAiBM,KAAM,CAAC,MAAO,qBAAsBC,KAAK,OAGlD,GAATZ,GAAcA,EAEdM,GACC,kBAAC,IAAD,CAAiBK,KAAM,CAAC,MAAO,sBAAuBC,KAAK,S,UCyCpDC,IAxDI,SAAAd,GACjB,IACEG,EAKEH,EALFG,YACAY,EAIEf,EAJFe,WACAX,EAGEJ,EAHFI,WACAC,EAEEL,EAFFK,qBACAW,EACEhB,EADFgB,WAGIC,EAAU,GAChB,GAAIF,GAtBuB,EAuBzB,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAYG,IAC/BD,EAAQE,KAAKD,QAEV,GAAIf,GAAe,EAAG,CAC3B,IAAK,IAAIe,EAAI,EAAGA,GAAKE,EAA0BF,IAC7CD,EAAQE,KAAKD,GAEfD,EAAQE,KAAK,EAAGJ,QACX,GAAIA,EAAaZ,EAAc,EAAG,CACvCc,EAAQE,KAAK,EAAG,GAChB,IAAK,IAAID,EAAIH,EAAa,EAAGG,GAAKH,EAAYG,IAC5CD,EAAQE,KAAKD,QAGfD,EAAQE,KACN,EACA,EACAhB,EAAc,EACdA,EACAA,EAAc,EACd,EACAY,GAIJ,OACE,oCACGA,GAAc,GACb,yBAAKL,UAAS,wBAA0BM,GACrCC,EAAQI,KAAI,SAACpB,EAAOC,GAAR,OACX,kBAAC,EAAD,CACEoB,IAAQlB,EAAL,IAAmBF,EACtBD,MAAOA,EACPC,MAAOA,EACPC,YAAaA,EACbC,WAAYA,EACZC,qBAAsBA,W,yDChEpC,8JA2DekB,UA/CK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAEzBC,EAMED,EANFC,IACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,gBACA1B,EAEEsB,EAFFtB,YACAY,EACEU,EADFV,WAEIe,EAAYN,EAAKO,kBAAkBC,MACnCC,EAAWC,YAAYJ,GACvBK,EACJ,oCACE,kBAAC,IAAD,CACEF,SAAUA,EACVG,aAAcC,IAAOC,gBACrBC,aAAa,IAEf,kBAAC,IAAD,CACEvB,WAAW,8BACXb,YAAaA,EACbY,WAAYA,EACZX,WAAYoC,YAAWd,GACvBrB,qBAAsBgC,IAAOhC,wBAI7BoC,EACJ,kBAAC,IAAD,CACEd,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjBa,MAAOL,IAAOM,eAIlB,OACE,kBAAC,IAAD,KACE,yBAAKjC,UAAU,iBACb,kBAAC,IAAD,CAAQkC,MAAUP,IAAOQ,UAAZ,IAAyBnB,EAAzB,MAAkCW,IAAOS,YACtD,kBAAC,IAAD,CAAQF,MAAUP,IAAOQ,UAAZ,IAAyBnB,IACtC,kBAAC,IAAD,CAAeS,QAASA,EAASM,QAASA","file":"component---src-templates-tag-template-jsx-bc2daefb0f13ecdefad6.js","sourcesContent":["import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport AutoLink from '../AutoLink/AutoLink'\r\n\r\nconst PaginationItem = props => {\r\n  const { value, index, currentPage, pathPrefix, pathPrefixPagination } = props\r\n  const isLeft = value === 0 && index < currentPage / 2\r\n  const isRight = value === 0 && index > currentPage / 2\r\n\r\n  let to = pathPrefix\r\n\r\n  if (isLeft) {\r\n    to += `${pathPrefixPagination}/${currentPage - 3}`\r\n  } else if (isRight) {\r\n    to += `${pathPrefixPagination}/${currentPage + 3}`\r\n  } else if (value !== 1) {\r\n    to += `${pathPrefixPagination}/${value}`\r\n  }\r\n\r\n  return (\r\n    <AutoLink\r\n      to={to}\r\n      className={`pagination-item ${currentPage === value ? 'active' : ''}`}\r\n      activeClassName=\"active\"\r\n    >\r\n      {isLeft && (\r\n        <FontAwesomeIcon icon={['fas', 'angle-double-left']} size=\"xs\" />\r\n      )}\r\n\r\n      {value != 0 && value}\r\n\r\n      {isRight && (\r\n        <FontAwesomeIcon icon={['fas', 'angle-double-right']} size=\"xs\" />\r\n      )}\r\n    </AutoLink>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React from 'react'\r\nimport PaginationItem from './PaginationItem'\r\nimport './Pagination.scss'\r\n\r\n// condition: totalPages >= 2\r\nconst MAX_PAGINATION_ITEMS = 7\r\n\r\n// For example: there is 9 pages\r\n// [1], 2, 3, 4, 5, 0, 9\r\n// 1, [2], 3, 4, 5, 0, 9\r\n// 1, 2, [3], 4, 5, 0, 9\r\n// 1, 2, 3, [4], 5, 0, 9\r\n// 1, 0, 4, [5], 6, 0, 9\r\n// 1, 0, 5, [6], 7, 8, 9\r\n// 1, 0, 5, 6, [7], 8, 9\r\n// 1, 0, 5, 6, 7, [8], 9\r\n// 1, 0, 5, 6, 7, 8, [9]\r\nconst Pagination = props => {\r\n  const {\r\n    currentPage,\r\n    totalPages,\r\n    pathPrefix,\r\n    pathPrefixPagination,\r\n    extraClass,\r\n  } = props\r\n\r\n  const respArr = []\r\n  if (totalPages <= MAX_PAGINATION_ITEMS) {\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      respArr.push(i)\r\n    }\r\n  } else if (currentPage <= 4) {\r\n    for (let i = 1; i <= MAX_PAGINATION_ITEMS - 2; i++) {\r\n      respArr.push(i)\r\n    }\r\n    respArr.push(0, totalPages)\r\n  } else if (totalPages - currentPage < 4) {\r\n    respArr.push(1, 0)\r\n    for (let i = totalPages - 4; i <= totalPages; i++) {\r\n      respArr.push(i)\r\n    }\r\n  } else {\r\n    respArr.push(\r\n      1,\r\n      0,\r\n      currentPage - 1,\r\n      currentPage,\r\n      currentPage + 1,\r\n      0,\r\n      totalPages\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {totalPages >= 2 && (\r\n        <div className={`pagination-container ${extraClass}`}>\r\n          {respArr.map((value, index) => (\r\n            <PaginationItem\r\n              key={`${pathPrefix}-${index}`}\r\n              value={value}\r\n              index={index}\r\n              currentPage={currentPage}\r\n              pathPrefix={pathPrefix}\r\n              pathPrefixPagination={pathPrefixPagination}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../layout'\r\nimport Header from '../components/Header/Header'\r\nimport MainContainer from '../components/MainContainer/MainContainer'\r\nimport Sidebar from '../components/Sidebar/Sidebar'\r\nimport PostListing from '../components/PostListing/PostListing'\r\nimport Pagination from '../components/Pagination/Pagination'\r\nimport { getPostList, getTagPath } from '../utils/helpers'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst TagTemplate = ({ data, pageContext }) => {\r\n  const {\r\n    tag,\r\n    tagList,\r\n    categoryList,\r\n    latestPostEdges,\r\n    currentPage,\r\n    totalPages,\r\n  } = pageContext\r\n  const postEdges = data.allMarkdownRemark.edges\r\n  const postList = getPostList(postEdges)\r\n  const content = (\r\n    <>\r\n      <PostListing\r\n        postList={postList}\r\n        hasThumbnail={config.tagHasThumbnail}\r\n        hasLoadmore={false}\r\n      />\r\n      <Pagination\r\n        extraClass=\"margin-top padding-top-half\"\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        pathPrefix={getTagPath(tag)}\r\n        pathPrefixPagination={config.pathPrefixPagination}\r\n      />\r\n    </>\r\n  )\r\n  const sidebar = (\r\n    <Sidebar\r\n      tagList={tagList}\r\n      categoryList={categoryList}\r\n      latestPostEdges={latestPostEdges}\r\n      links={config.sidebarLinks}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"tag-container\">\r\n        <Helmet title={`${config.tagHeader} ${tag} - ${config.siteTitle}`} />\r\n        <Header title={`${config.tagHeader} ${tag}`} />\r\n        <MainContainer content={content} sidebar={sidebar} />\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default TagTemplate\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query TagPage($tag: String, $skip: Int!, $limit: Int!) {\r\n    allMarkdownRemark(\r\n      limit: $limit\r\n      skip: $skip\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: {\r\n        frontmatter: { tags: { in: [$tag] }, template: { eq: \"post\" } }\r\n      }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            categories\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 660, quality: 100) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}