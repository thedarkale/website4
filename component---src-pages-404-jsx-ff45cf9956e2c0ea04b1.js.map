{"version":3,"sources":["webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx","webpack:///./src/pages/404.jsx"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","render","title","description","keywords","postURL","this","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","cover","childImageSharp","fixed","src","urljoin","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Component","PageNotFound","hasFooter","className","pageNotFoundTitle","pageNotFoundContent","to","pageNotFoundBtn"],"mappings":"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","file":"component---src-pages-404-jsx-ff45cf9956e2c0ea04b1.js","sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport urljoin from 'url-join'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props\r\n    let title\r\n    let description\r\n    let keywords\r\n    let image = ''\r\n    let postURL\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter\r\n      ;({ title } = postMeta)\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt\r\n\r\n      keywords = postMeta.keywords\r\n\r\n      if (postMeta.cover) {\r\n        image = postMeta.cover.childImageSharp.fixed.src\r\n      }\r\n\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\r\n    } else {\r\n      title = config.siteTitle\r\n      description = config.siteDescription\r\n      image = config.siteLogo\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image)\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        '@context': 'http://schema.org',\r\n        '@type': 'WebSite',\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n      },\r\n    ]\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          '@context': 'http://schema.org',\r\n          '@type': 'BreadcrumbList',\r\n          itemListElement: [\r\n            {\r\n              '@type': 'ListItem',\r\n              position: 1,\r\n              item: {\r\n                '@id': postURL,\r\n                name: title,\r\n                image,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          '@context': 'http://schema.org',\r\n          '@type': 'BlogPosting',\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n          headline: title,\r\n          image: {\r\n            '@type': 'ImageObject',\r\n            url: image,\r\n          },\r\n          description,\r\n        }\r\n      )\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n        {keywords && <meta name=\"keywords\" content={keywords} />}\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : ''}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport Layout from '../layout'\r\nimport Header from '../components/Header/Header'\r\nimport SEO from '../components/SEO/SEO'\r\nimport AutoLink from '../components/AutoLink/AutoLink'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst PageNotFound = () => (\r\n  <Layout hasFooter={false}>\r\n    <div className=\"page-not-found-container\">\r\n      <Helmet title={`${config.pageNotFoundTitle} - ${config.siteTitle}`} />\r\n      <SEO />\r\n      <Header title={`${config.pageNotFoundTitle}`} />\r\n      <div className=\"main-content container padding-top-3 padding-bottom-3 margin-top-3 margin-bottom-3\">\r\n        <p>{config.pageNotFoundContent}</p>\r\n        <AutoLink to=\"/\" className=\"btn btn-primary\">\r\n          {config.pageNotFoundBtn}\r\n        </AutoLink>\r\n      </div>\r\n    </div>\r\n  </Layout>\r\n)\r\n\r\nexport default PageNotFound\r\n"],"sourceRoot":""}