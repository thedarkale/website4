{"version":3,"sources":["webpack:///./src/components/Sidebar/WidgetContainer.jsx","webpack:///./src/components/Sidebar/WidgetTitle.jsx","webpack:///./src/components/Sidebar/WidgetCategory.jsx","webpack:///./src/components/Tag/Tag.jsx","webpack:///./src/components/Sidebar/WidgetTag.jsx","webpack:///./src/components/Sidebar/WidgetLatestPosts.jsx","webpack:///./src/components/Sidebar/WidgetLinks.jsx","webpack:///./src/components/Sidebar/WidgetSearch.jsx","webpack:///./src/components/Sidebar/Sidebar.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/MainContainer/MainContainer.jsx","webpack:///./src/components/Page/Page.jsx","webpack:///./src/templates/page-template.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["WidgetContainer","extraClass","children","className","WidgetTitle","title","WidgetCategory","categoryList","config","categoryWidgetTitle","map","category","AutoLink","key","to","getCategoryPath","Tag","content","getTagPath","WidgetTag","tagList","tagWidgetTitle","tag","WidgetLatesPosts","latestPostEdges","postList","getPostList","latestPostsWidgetTitle","post","slug","WidgetLinks","links","length","linksWidgetTitle","link","label","url","WidgetSearch","render","hasSearch","searchWidgetTitle","action","method","type","name","placeholder","searchWidgetPlaceHolder","required","spellCheck","icon","style","color","Component","Sidebar","sidebarSticky","WidgetLatestPosts","normalize","strArray","resultArray","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","MainContainer","sidebar","Page","postNode","frontmatter","id","dangerouslySetInnerHTML","__html","html","PageTemplate","data","pageContext","markdownRemark","sidebarLinks","siteTitle","SEO","postPath","postSEO","Header","description","keywords","postURL","this","props","image","postMeta","excerpt","cover","childImageSharp","fixed","src","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","itemListElement","position","item","headline","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-page-template-jsx-0d50d375024af5c2bd06.js","sourcesContent":["import React from \"react\";\r\n\r\nconst WidgetContainer = ({ extraClass = \"\", children }) => (\r\n  <aside className={`${extraClass} padding-top padding-bottom`}>\r\n    {children}\r\n  </aside>\r\n)\r\n\r\nexport default WidgetContainer;","import React from \"react\";\r\n\r\nconst WidgetTitle = ({ title }) => (\r\n  <h3 className=\"text-uppercase\">\r\n    <small>{title}</small>\r\n  </h3>\r\n)\r\n\r\nexport default WidgetTitle;","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport { getCategoryPath } from \"../../utils/helpers\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetCategory = ({ categoryList }) => (\r\n  <WidgetContainer extraClass=\"categories-container\">\r\n    <WidgetTitle title={config.categoryWidgetTitle} />\r\n    <div>\r\n      {\r\n        categoryList.map(category => (\r\n          <AutoLink \r\n            key={category} \r\n            to={getCategoryPath(category)}\r\n            className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n          >\r\n            <span>{category}</span>\r\n          </AutoLink>\r\n        ))\r\n      }\r\n    </div>\r\n  </WidgetContainer>\r\n)\r\n\r\nexport default WidgetCategory;","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport { getTagPath } from \"../../utils/helpers\";\r\n\r\nconst Tag = ({ content }) => (\r\n  <AutoLink \r\n    key={content} \r\n    to={getTagPath(content)}\r\n    className=\"inline-block margin-right-half margin-bottom-half \r\n      border border-color-light-grey padding-left-half padding-right-half\"\r\n  >\r\n    <span>{content}</span>\r\n  </AutoLink>\r\n)\r\n\r\nexport default Tag;","import React from \"react\";\r\nimport Tag from \"../Tag/Tag\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetTag = ({ tagList }) => (\r\n  <WidgetContainer extraClass=\"categories-container\">\r\n    <WidgetTitle title={config.tagWidgetTitle} />\r\n    <div>\r\n      {tagList.map(tag => (\r\n        <Tag key={tag} content={tag} />\r\n      ))}\r\n    </div>\r\n  </WidgetContainer>\r\n)\r\n\r\nexport default WidgetTag;","import React from \"react\";\r\nimport AutoLink from \"../AutoLink/AutoLink\";\r\nimport WidgetContainer from \"./WidgetContainer\";\r\nimport WidgetTitle from \"./WidgetTitle\";\r\nimport { getPostList } from \"../../utils/helpers\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nconst WidgetLatesPosts = ({ latestPostEdges }) => {\r\n  const postList = getPostList(latestPostEdges);\r\n\r\n  return (\r\n    <WidgetContainer extraClass=\"latest-posts-container\">\r\n      <WidgetTitle title={config.latestPostsWidgetTitle} />\r\n      <div>\r\n        {\r\n          postList.map(post => (\r\n            <AutoLink\r\n              key={post.title}\r\n              to={post.slug}\r\n              className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n            >\r\n              <span>{post.title}</span>\r\n            </AutoLink>\r\n          ))\r\n        }\r\n      </div>\r\n    </WidgetContainer>\r\n  )\r\n}\r\n\r\nexport default WidgetLatesPosts;","import React from 'react';\r\nimport AutoLink from '../AutoLink/AutoLink';\r\nimport WidgetContainer from './WidgetContainer';\r\nimport WidgetTitle from './WidgetTitle';\r\nimport config from '../../../data/SiteConfig';\r\n\r\nconst WidgetLinks = ({ links }) => (\r\n  <>\r\n    {links && links.length > 0 && (\r\n      <WidgetContainer extraClass=\"categories-container\">\r\n        <WidgetTitle title={config.linksWidgetTitle} />\r\n        <div>\r\n          {links.map(link => (\r\n            <AutoLink\r\n              key={link.label}\r\n              to={link.url}\r\n              className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n            >\r\n              <span>{link.label}</span>\r\n            </AutoLink>\r\n          ))}\r\n        </div>\r\n      </WidgetContainer>\r\n    )}\r\n  </>\r\n);\r\n\r\nexport default WidgetLinks;\r\n","import React, { Component } from 'react';\r\nimport WidgetContainer from './WidgetContainer';\r\nimport WidgetTitle from './WidgetTitle';\r\nimport config from '../../../data/SiteConfig';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass WidgetSearch extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {config.hasSearch && (\r\n          <WidgetContainer extraClass=\"search-container\">\r\n            <WidgetTitle title={config.searchWidgetTitle} />\r\n            <form className=\"margin-bottom-none\" action=\"/search/\" method=\"get\">\r\n              <div className=\"container-full row padding-none margin-bottom-none\">\r\n                <div className=\"padding-none padding-right-half col-xs-10\">\r\n                  <input\r\n                    className=\"margin-bottom-none\"\r\n                    type=\"text\"\r\n                    name=\"q\"\r\n                    placeholder={config.searchWidgetPlaceHolder}\r\n                    required\r\n                    spellCheck=\"false\"\r\n                  />\r\n                </div>\r\n                <div className=\"padding-none padding-left-half col-xs-2\">\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    <FontAwesomeIcon\r\n                      icon={['fas', 'search']}\r\n                      style={{ color: '#FFFFFF' }}\r\n                    />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </WidgetContainer>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WidgetSearch;\r\n","import React from 'react';\r\nimport WidgetCategory from './WidgetCategory';\r\nimport WidgetTag from './WidgetTag';\r\nimport WidgetLatestPosts from './WidgetLatestPosts';\r\nimport WidgetLinks from './WidgetLinks';\r\nimport WidgetSearch from './WidgetSearch';\r\nimport config from '../../../data/SiteConfig';\r\n\r\nconst Sidebar = ({ tagList, categoryList, latestPostEdges, links }) => {\r\n  return (\r\n    <aside\r\n      className={`sidebar-container width-full ${\r\n        config.sidebarSticky ? 'height-full' : ''\r\n      }`}\r\n    >\r\n      <WidgetSearch />\r\n\r\n      {latestPostEdges && (\r\n        <WidgetLatestPosts latestPostEdges={latestPostEdges} />\r\n      )}\r\n\r\n      {categoryList && <WidgetCategory categoryList={categoryList} />}\r\n\r\n      {tagList && <WidgetTag tagList={tagList} />}\r\n\r\n      {links && (\r\n        <div className=\"position-sticky top-zero\">\r\n          <WidgetLinks links={links} />\r\n        </div>\r\n      )}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from \"react\";\r\nimport \"./MainContainer.scss\";\r\n\r\nconst MainContainer = ({ content, sidebar }) => (\r\n  <section className=\"main-container container\">\r\n    <div className=\"content-wrapper padding-top-half padding-bottom-2\">\r\n      {content}\r\n    </div>\r\n    <div className=\"sidebar-wrapper padding-top-half padding-bottom-2\">\r\n      {sidebar}\r\n    </div>\r\n  </section>\r\n)\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\n\r\nconst Page = ({ postNode, slug }) => {\r\n  const post = postNode.frontmatter;\r\n  if (!post.id) {\r\n    post.id = slug;\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <div \r\n        className=\"padding-top padding-bottom\" \r\n        dangerouslySetInnerHTML={{ __html: postNode.html }} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Page;","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport Header from \"../components/Header/Header\";\r\nimport MainContainer from \"../components/MainContainer/MainContainer\";\r\nimport Sidebar from \"../components/Sidebar/Sidebar\";\r\nimport Page from \"../components/Page/Page\";\r\nimport SEO from \"../components/SEO/SEO\";\r\nimport config from \"../../data/SiteConfig\";\r\n\r\nconst PageTemplate = ({ data, pageContext }) => {\r\n  const { slug, tagList, categoryList, latestPostEdges } = pageContext;\r\n  const postNode = data.markdownRemark;\r\n  const title = postNode.frontmatter.title;\r\n  const content = <Page postNode={postNode} slug={slug} />;\r\n  const sidebar = <Sidebar \r\n    tagList={tagList} \r\n    categoryList={categoryList}\r\n    latestPostEdges={latestPostEdges} \r\n    links={config.sidebarLinks}\r\n  />;\r\n\r\n  return (\r\n    <Layout>\r\n      <Helmet>\r\n        <title>{`${title} - ${config.siteTitle}`}</title>\r\n      </Helmet>\r\n      <SEO postPath={slug} postNode={postNode} postSEO />\r\n      <Header title={title} />\r\n      <MainContainer content={content} sidebar={sidebar} />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default PageTemplate;\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query BlogPageBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        description\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport urljoin from \"url-join\";\r\nimport config from \"../../../data/SiteConfig\";\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props;\r\n    let title;\r\n    let description;\r\n    let keywords;\r\n    let image = \"\";\r\n    let postURL;\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter;\r\n      ({ title } = postMeta);\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt;\r\n\r\n      keywords = postMeta.keywords\r\n\r\n      if (postMeta.cover) {\r\n        image = postMeta.cover.childImageSharp.fixed.src;\r\n      }\r\n\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\r\n    } else {\r\n      title = config.siteTitle;\r\n      description = config.siteDescription;\r\n      image = config.siteLogo;\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"WebSite\",\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\r\n      }\r\n    ];\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BreadcrumbList\",\r\n          itemListElement: [\r\n            {\r\n              \"@type\": \"ListItem\",\r\n              position: 1,\r\n              item: {\r\n                \"@id\": postURL,\r\n                name: title,\r\n                image\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"@context\": \"http://schema.org\",\r\n          \"@type\": \"BlogPosting\",\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\r\n          headline: title,\r\n          image: {\r\n            \"@type\": \"ImageObject\",\r\n            url: image\r\n          },\r\n          description\r\n        }\r\n      );\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n        {keywords && <meta name=\"keywords\" content={keywords} />}\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : \"\"}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}