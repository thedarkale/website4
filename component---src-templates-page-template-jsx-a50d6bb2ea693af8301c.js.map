{"version":3,"sources":["webpack:///./src/components/Sidebar/WidgetContainer.jsx","webpack:///./src/components/Sidebar/WidgetTitle.jsx","webpack:///./src/components/Sidebar/WidgetCategory.jsx","webpack:///./src/components/Tag/Tag.jsx","webpack:///./src/components/Sidebar/WidgetTag.jsx","webpack:///./src/components/Sidebar/WidgetLatestPosts.jsx","webpack:///./src/components/Sidebar/WidgetLinks.jsx","webpack:///./src/components/Sidebar/Sidebar.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/MainContainer/MainContainer.jsx","webpack:///./src/components/Page/Page.jsx","webpack:///./src/templates/page-template.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["WidgetContainer","extraClass","children","className","WidgetTitle","title","WidgetCategory","categoryList","useState","isShowFullList","isSetShowFullList","categories","setCategories","showMoreButtonText","setShowMoreButtonText","useEffect","slice","config","categoryWidgetTitle","map","category","AutoLink","key","to","getCategoryPath","onClick","Tag","content","getTagPath","WidgetTag","tagList","tagWidgetTitle","tag","WidgetLatesPosts","latestPostEdges","postList","getPostList","latestPostsWidgetTitle","post","slug","WidgetLinks","links","length","linksWidgetTitle","link","label","url","Sidebar","sidebarSticky","WidgetLatestPosts","normalize","strArray","resultArray","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","call","module","exports","definition","MainContainer","sidebar","Page","postNode","frontmatter","id","dangerouslySetInnerHTML","__html","html","PageTemplate","data","pageContext","markdownRemark","sidebarLinks","siteTitle","SEO","postPath","postSEO","Header","render","description","keywords","postURL","this","props","image","postMeta","excerpt","cover","childImageSharp","fixed","src","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","name","alternateName","siteTitleAlt","itemListElement","position","item","headline","type","JSON","stringify","property","siteFBAppID","userTwitter","Component"],"mappings":"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","file":"component---src-templates-page-template-jsx-a50d6bb2ea693af8301c.js","sourcesContent":["import React from 'react'\r\n\r\nconst WidgetContainer = ({ extraClass = '', children }) => (\r\n  <aside className={`${extraClass} padding-top padding-bottom`}>\r\n    {children}\r\n  </aside>\r\n)\r\n\r\nexport default WidgetContainer\r\n","import React from 'react'\r\n\r\nconst WidgetTitle = ({ title }) => (\r\n  <h3 className=\"text-uppercase\">\r\n    <small>{title}</small>\r\n  </h3>\r\n)\r\n\r\nexport default WidgetTitle\r\n","import React, { useState, useEffect } from 'react'\r\nimport AutoLink from '../AutoLink/AutoLink'\r\nimport WidgetContainer from './WidgetContainer'\r\nimport WidgetTitle from './WidgetTitle'\r\nimport { getCategoryPath } from '../../utils/helpers'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nconst WidgetCategory = ({ categoryList }) => {\r\n  const [isShowFullList, isSetShowFullList] = useState(false)\r\n  const [categories, setCategories] = useState(categoryList)\r\n  const [showMoreButtonText, setShowMoreButtonText] = useState('Show More')\r\n\r\n  useEffect(() => {\r\n    if (isShowFullList) {\r\n      setCategories(categoryList)\r\n      setShowMoreButtonText('Show Less')\r\n      return\r\n    }\r\n\r\n    setCategories(categoryList.slice(0, 5))\r\n    setShowMoreButtonText('Show More')\r\n  }, [isShowFullList])\r\n\r\n  return (\r\n    <WidgetContainer extraClass=\"categories-container\">\r\n      <WidgetTitle title={config.categoryWidgetTitle} />\r\n      <div>\r\n        {categories.map(category => (\r\n          <AutoLink\r\n            key={category}\r\n            to={getCategoryPath(category)}\r\n            className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n          >\r\n            <span>{category}</span>\r\n          </AutoLink>\r\n        ))}\r\n        <button\r\n          className=\"mt-4\"\r\n          onClick={() => isSetShowFullList(!isShowFullList)}\r\n        >\r\n          {showMoreButtonText}\r\n        </button>\r\n      </div>\r\n    </WidgetContainer>\r\n  )\r\n}\r\n\r\nexport default WidgetCategory\r\n","import React from 'react'\r\nimport AutoLink from '../AutoLink/AutoLink'\r\nimport { getTagPath } from '../../utils/helpers'\r\n\r\nconst Tag = ({ content }) => (\r\n  <AutoLink\r\n    key={content}\r\n    to={getTagPath(content)}\r\n    className=\"inline-block margin-right-half margin-bottom-half \r\n      border border-color-light-grey padding-left-half padding-right-half\"\r\n  >\r\n    <span>{content}</span>\r\n  </AutoLink>\r\n)\r\n\r\nexport default Tag\r\n","import React from 'react'\r\nimport Tag from '../Tag/Tag'\r\nimport WidgetContainer from './WidgetContainer'\r\nimport WidgetTitle from './WidgetTitle'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nconst WidgetTag = ({ tagList }) => (\r\n  <WidgetContainer extraClass=\"categories-container\">\r\n    <WidgetTitle title={config.tagWidgetTitle} />\r\n    <div>\r\n      {tagList.slice(0, 20).map(tag => (\r\n        <Tag key={tag} content={tag} />\r\n      ))}\r\n    </div>\r\n  </WidgetContainer>\r\n)\r\n\r\nexport default WidgetTag\r\n","import React from 'react'\r\nimport AutoLink from '../AutoLink/AutoLink'\r\nimport WidgetContainer from './WidgetContainer'\r\nimport WidgetTitle from './WidgetTitle'\r\nimport { getPostList } from '../../utils/helpers'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nconst WidgetLatesPosts = ({ latestPostEdges }) => {\r\n  const postList = getPostList(latestPostEdges)\r\n\r\n  return (\r\n    <WidgetContainer extraClass=\"latest-posts-container\">\r\n      <WidgetTitle title={config.latestPostsWidgetTitle} />\r\n      <div>\r\n        {postList.map(post => (\r\n          <AutoLink\r\n            key={post.title}\r\n            to={post.slug}\r\n            className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n          >\r\n            <span>{post.title}</span>\r\n          </AutoLink>\r\n        ))}\r\n      </div>\r\n    </WidgetContainer>\r\n  )\r\n}\r\n\r\nexport default WidgetLatesPosts\r\n","import React from 'react'\r\nimport AutoLink from '../AutoLink/AutoLink'\r\nimport WidgetContainer from './WidgetContainer'\r\nimport WidgetTitle from './WidgetTitle'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nconst WidgetLinks = ({ links }) => (\r\n  <>\r\n    {links && links.length > 0 && (\r\n      <WidgetContainer extraClass=\"categories-container\">\r\n        <WidgetTitle title={config.linksWidgetTitle} />\r\n        <div>\r\n          {links.map(link => (\r\n            <AutoLink\r\n              key={link.label}\r\n              to={link.url}\r\n              className=\"block border-bottom border-color-light-grey padding-top-half padding-bottom-half\"\r\n            >\r\n              <span>{link.label}</span>\r\n            </AutoLink>\r\n          ))}\r\n        </div>\r\n      </WidgetContainer>\r\n    )}\r\n  </>\r\n)\r\n\r\nexport default WidgetLinks\r\n","import React from 'react'\r\nimport WidgetCategory from './WidgetCategory'\r\nimport WidgetTag from './WidgetTag'\r\nimport WidgetLatestPosts from './WidgetLatestPosts'\r\nimport WidgetLinks from './WidgetLinks'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nconst Sidebar = ({ tagList, categoryList, latestPostEdges, links }) => {\r\n  return (\r\n    <aside\r\n      className={`sidebar-container width-full ${\r\n        config.sidebarSticky ? 'height-full' : ''\r\n      }`}\r\n    >\r\n      {latestPostEdges && (\r\n        <WidgetLatestPosts latestPostEdges={latestPostEdges} />\r\n      )}\r\n\r\n      {categoryList && <WidgetCategory categoryList={categoryList} />}\r\n\r\n      {tagList && <WidgetTag tagList={tagList} />}\r\n\r\n      {links && (\r\n        <div className=\"position-sticky top-zero\">\r\n          <WidgetLinks links={links} />\r\n        </div>\r\n      )}\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from 'react'\r\nimport './MainContainer.scss'\r\n\r\nconst MainContainer = ({ content, sidebar }) => (\r\n  <section className=\"main-container container\">\r\n    <div className=\"content-wrapper padding-top-half padding-bottom-2\">\r\n      {content}\r\n    </div>\r\n    <div className=\"sidebar-wrapper padding-top-half padding-bottom-2\">\r\n      {sidebar}\r\n    </div>\r\n  </section>\r\n)\r\n\r\nexport default MainContainer\r\n","import React from 'react'\r\n\r\nconst Page = ({ postNode, slug }) => {\r\n  const post = postNode.frontmatter\r\n  if (!post.id) {\r\n    post.id = slug\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <div\r\n        className=\"padding-top padding-bottom\"\r\n        dangerouslySetInnerHTML={{ __html: postNode.html }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Page\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../layout'\r\nimport Header from '../components/Header/Header'\r\nimport MainContainer from '../components/MainContainer/MainContainer'\r\nimport Sidebar from '../components/Sidebar/Sidebar'\r\nimport Page from '../components/Page/Page'\r\nimport SEO from '../components/SEO/SEO'\r\nimport config from '../../data/SiteConfig'\r\n\r\nconst PageTemplate = ({ data, pageContext }) => {\r\n  const { slug, tagList, categoryList, latestPostEdges } = pageContext\r\n  const postNode = data.markdownRemark\r\n  const title = postNode.frontmatter.title\r\n  const content = <Page postNode={postNode} slug={slug} />\r\n  const sidebar = (\r\n    <Sidebar\r\n      tagList={tagList}\r\n      categoryList={categoryList}\r\n      latestPostEdges={latestPostEdges}\r\n      links={config.sidebarLinks}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <Layout>\r\n      <Helmet>\r\n        <title>{`${title} - ${config.siteTitle}`}</title>\r\n      </Helmet>\r\n      <SEO postPath={slug} postNode={postNode} postSEO />\r\n      <Header title={title} />\r\n      <MainContainer content={content} sidebar={sidebar} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PageTemplate\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query BlogPageBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      timeToRead\r\n      excerpt\r\n      frontmatter {\r\n        title\r\n        description\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React, { Component } from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport urljoin from 'url-join'\r\nimport config from '../../../data/SiteConfig'\r\n\r\nclass SEO extends Component {\r\n  render() {\r\n    const { postNode, postPath, postSEO } = this.props\r\n    let title\r\n    let description\r\n    let keywords\r\n    let image = ''\r\n    let postURL\r\n    if (postSEO) {\r\n      const postMeta = postNode.frontmatter\r\n      ;({ title } = postMeta)\r\n      description = postMeta.description\r\n        ? postMeta.description\r\n        : postNode.excerpt\r\n\r\n      keywords = postMeta.keywords\r\n\r\n      if (postMeta.cover) {\r\n        image = postMeta.cover.childImageSharp.fixed.src\r\n      }\r\n\r\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\r\n    } else {\r\n      title = config.siteTitle\r\n      description = config.siteDescription\r\n      image = config.siteLogo\r\n    }\r\n\r\n    image = urljoin(config.siteUrl, config.pathPrefix, image)\r\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\r\n    const schemaOrgJSONLD = [\r\n      {\r\n        '@context': 'http://schema.org',\r\n        '@type': 'WebSite',\r\n        url: blogURL,\r\n        name: title,\r\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n      },\r\n    ]\r\n    if (postSEO) {\r\n      schemaOrgJSONLD.push(\r\n        {\r\n          '@context': 'http://schema.org',\r\n          '@type': 'BreadcrumbList',\r\n          itemListElement: [\r\n            {\r\n              '@type': 'ListItem',\r\n              position: 1,\r\n              item: {\r\n                '@id': postURL,\r\n                name: title,\r\n                image,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          '@context': 'http://schema.org',\r\n          '@type': 'BlogPosting',\r\n          url: blogURL,\r\n          name: title,\r\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n          headline: title,\r\n          image: {\r\n            '@type': 'ImageObject',\r\n            url: image,\r\n          },\r\n          description,\r\n        }\r\n      )\r\n    }\r\n    return (\r\n      <Helmet>\r\n        {/* General tags */}\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"image\" content={image} />\r\n        {keywords && <meta name=\"keywords\" content={keywords} />}\r\n\r\n        {/* Schema.org tags */}\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaOrgJSONLD)}\r\n        </script>\r\n\r\n        {/* OpenGraph tags */}\r\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\r\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta\r\n          property=\"fb:app_id\"\r\n          content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n        />\r\n\r\n        {/* Twitter Card tags */}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta\r\n          name=\"twitter:creator\"\r\n          content={config.userTwitter ? config.userTwitter : ''}\r\n        />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n      </Helmet>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}